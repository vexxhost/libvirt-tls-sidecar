apiVersion: v1
kind: ConfigMap
metadata:
  name: libvirt-bin
data:
  libvirt.sh: |
    #!/bin/bash

    set -ex

    wait_for_file() {
      local file=$1

      while [ ! -f $file ]; do
        sleep 1
      done
    }

    wait_for_file /etc/pki/CA/cacert.pem
    wait_for_file /etc/pki/qemu/ca-cert.pem

    wait_for_file /etc/pki/libvirt/servercert.pem
    wait_for_file /etc/pki/libvirt/clientcert.pem
    wait_for_file /etc/pki/qemu/server-cert.pem
    wait_for_file /etc/pki/qemu/client-cert.pem

    wait_for_file /etc/pki/libvirt/private/serverkey.pem
    wait_for_file /etc/pki/libvirt/private/clientkey.pem
    wait_for_file /etc/pki/qemu/server-key.pem
    wait_for_file /etc/pki/qemu/client-key.pem

    wait_for_file /etc/pki/libvirt-vnc/ca-cert.pem
    wait_for_file /etc/pki/libvirt-vnc/server-cert.pem
    wait_for_file /etc/pki/libvirt-vnc/server-key.pem

    # TODO: We disable cgroup functionality for cgroup v2, we should fix this in the future
    if $(stat -fc %T /sys/fs/cgroup/ | grep -q cgroup2fs); then
      CGROUP_VERSION=v2
    else
      CGROUP_VERSION=v1
    fi

    if [ -n "$(cat /proc/*/comm 2>/dev/null | grep -w libvirtd)" ]; then
      set +x
      for proc in $(ls /proc/*/comm 2>/dev/null); do
        if [ "x$(cat $proc 2>/dev/null | grep -w libvirtd)" == "xlibvirtd" ]; then
          set -x
          libvirtpid=$(echo $proc | cut -f 3 -d '/')
          echo "WARNING: libvirtd daemon already running on host" 1>&2
          echo "$(cat "/proc/${libvirtpid}/status" 2>/dev/null | grep State)" 1>&2
          kill -9 "$libvirtpid" || true
          set +x
        fi
      done
      set -x
    fi

    rm -f /var/run/libvirtd.pid

    if [[ -c /dev/kvm ]]; then
        chmod 660 /dev/kvm
        chown root:kvm /dev/kvm
    fi

    if [ $CGROUP_VERSION != "v2" ]; then
      #Setup Cgroups to use when breaking out of Kubernetes defined groups
      CGROUPS=""
      for CGROUP in cpu rdma hugetlb; do
        if [ -d /sys/fs/cgroup/${CGROUP} ]; then
          CGROUPS+="${CGROUP},"
        fi
      done
      cgcreate -g ${CGROUPS%,}:/osh-libvirt
    fi

    if [ $CGROUP_VERSION != "v2" ]; then
      #NOTE(portdirect): run libvirtd as a transient unit on the host with the osh-libvirt cgroups applied.
      cgexec -g ${CGROUPS%,}:/osh-libvirt systemd-run --scope --slice=system libvirtd --listen
    else
      systemd-run --scope --slice=system libvirtd --listen
    fi
  wait-for-libvirt.sh: |
    #!/bin/bash

    set -xe

    # NOTE(mnaser): We use this script in the postStart hook of the libvirt
    #               container to ensure that the libvirt daemon is running
    #               before we start the exporter.
    until virsh list --all; do
        echo "Waiting for libvirt to be ready..."
        sleep 1
    done
---
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: libvirt-libvirt-default
data:
  libvirtd.conf: CmF1dGhfdGNwID0gIm5vbmUiCmF1dGhfdW5peF9ydyA9ICJub25lIgpjYV9maWxlID0gIi9ldGMvcGtpL0NBL2NhY2VydC5wZW0iCmNlcnRfZmlsZSA9ICIvZXRjL3BraS9saWJ2aXJ0L3NlcnZlcmNlcnQucGVtIgprZXlfZmlsZSA9ICIvZXRjL3BraS9saWJ2aXJ0L3ByaXZhdGUvc2VydmVya2V5LnBlbSIKbGlzdGVuX2FkZHIgPSAiMC4wLjAuMCIKbGlzdGVuX3RjcCA9IDAKbGlzdGVuX3RscyA9IDEKbG9nX2xldmVsID0gMwpsb2dfb3V0cHV0cyA9ICIxOmZpbGU6L3Zhci9sb2cvbGlidmlydC9saWJ2aXJ0ZC5sb2ci
  qemu.conf: CmRlZmF1bHRfdGxzX3g1MDlfY2VydF9kaXIgPSAiL2V0Yy9wa2kvcWVtdSIKZGVmYXVsdF90bHNfeDUwOV92ZXJpZnkgPSAxCmdyb3VwID0gImt2bSIKc3RkaW9faGFuZGxlciA9ICJmaWxlIgp1c2VyID0gIm5vdmEiCnZuY190bHMgPSAxCnZuY190bHNfeDUwOV92ZXJpZnkgPSAw
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: libvirt
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: libvirt-cert-manager
rules:
- apiGroups:
  - cert-manager.io
  resources:
  - certificates
  verbs:
  - get
  - list
  - create
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - patch
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: libvirt-cert-manager
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: libvirt-cert-manager
subjects:
- kind: ServiceAccount
  name: libvirt
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: libvirt-libvirt-default
spec:
  selector:
    matchLabels:
      application: libvirt
      component: libvirt
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: libvirt
      labels:
        application: libvirt
        component: libvirt
    spec:
      containers:
      - name: tls-sidecar
        image: libvirt-tls-sidecar
        env:
        - name: API_ISSUER_KIND
          value: Issuer
        - name: API_ISSUER_NAME
          value: libvirt-api
        - name: VNC_ISSUER_KIND
          value: Issuer
        - name: VNC_ISSUER_NAME
          value: libvirt-vnc
        - name: POD_UID
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.uid
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        volumeMounts:
        - mountPath: /etc/pki/qemu
          name: etc-pki-qemu
        - mountPath: /etc/pki/CA
          name: etc-pki-ca
        - mountPath: /etc/pki/libvirt
          name: etc-pki-libvirt
        - mountPath: /etc/pki/libvirt-vnc
          name: etc-pki-libvirt-vnc
        - name: run
          mountPath: /run
      - name: libvirt
        image: registry.atmosphere.dev/library/libvirtd:main
        command:
        - /tmp/libvirt.sh
        lifecycle:
          postStart:
            exec:
              command:
              - /tmp/wait-for-libvirt.sh
          preStop:
            exec:
              command:
              - bash
              - -c
              - kill $(cat /var/run/libvirtd.pid)
        livenessProbe:
          exec:
            command:
            - bash
            - -c
            - /usr/bin/virsh list
          failureThreshold: 3
          initialDelaySeconds: 30
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
            - bash
            - -c
            - /usr/bin/virsh list
          failureThreshold: 3
          initialDelaySeconds: 15
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 5
        securityContext:
          privileged: true
          readOnlyRootFilesystem: false
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/pki/qemu
          name: etc-pki-qemu
        - mountPath: /etc/pki/CA
          name: etc-pki-ca
        - mountPath: /etc/pki/libvirt
          name: etc-pki-libvirt
        - mountPath: /etc/pki/libvirt-vnc
          name: etc-pki-libvirt-vnc
        - mountPath: /tmp
          name: pod-tmp
        - mountPath: /tmp/libvirt.sh
          name: libvirt-bin
          readOnly: true
          subPath: libvirt.sh
        - mountPath: /tmp/wait-for-libvirt.sh
          name: libvirt-bin
          readOnly: true
          subPath: wait-for-libvirt.sh
        - mountPath: /etc/libvirt/libvirtd.conf
          name: libvirt-etc
          readOnly: true
          subPath: libvirtd.conf
        - mountPath: /etc/libvirt/qemu.conf
          name: libvirt-etc
          readOnly: true
          subPath: qemu.conf
        - mountPath: /etc/libvirt/qemu
          name: etc-libvirt-qemu
        - mountPath: /lib/modules
          name: libmodules
          readOnly: true
        - mountPath: /var/lib/libvirt
          mountPropagation: Bidirectional
          name: var-lib-libvirt
        - mountPath: /var/lib/nova
          mountPropagation: Bidirectional
          name: var-lib-nova
        - mountPath: /run
          name: run
        - mountPath: /dev
          name: dev
        - mountPath: /sys/fs/cgroup
          name: cgroup
        - mountPath: /var/log/libvirt
          name: logs
        - mountPath: /etc/machine-id
          name: machine-id
          readOnly: true
      dnsPolicy: ClusterFirstWithHostNet
      hostIPC: true
      hostNetwork: true
      hostPID: true
      securityContext:
        runAsUser: 0
      serviceAccount: libvirt
      serviceAccountName: libvirt
      terminationGracePeriodSeconds: 1
      volumes:
      - name: etc-pki-qemu
        hostPath:
          path: /etc/pki/qemu
          type: DirectoryOrCreate
      - name: etc-pki-ca
        emptyDir: {}
      - name: etc-pki-libvirt
        emptyDir: {}
      - name: etc-pki-libvirt-vnc
        hostPath:
          path: /etc/pki/libvirt-vnc
          type: DirectoryOrCreate
      - name: pod-tmp
        emptyDir: {}
      - name: libvirt-bin
        configMap:
          defaultMode: 365
          name: libvirt-bin
      - name: libvirt-etc
        secret:
          defaultMode: 292
          secretName: libvirt-libvirt-default
      - name: libmodules
        hostPath:
          path: /lib/modules
          type: Directory
      - name: var-lib-libvirt
        hostPath:
          path: /var/lib/libvirt
          type: DirectoryOrCreate
      - name: var-lib-nova
        hostPath:
          path: /var/lib/nova
          type: DirectoryOrCreate
      - name: run
        hostPath:
          path: /run
          type: Directory
      - name: dev
        hostPath:
          path: /dev
          type: Directory
      - name: logs
        hostPath:
          path: /var/log/libvirt
          type: DirectoryOrCreate
      - name: cgroup
        hostPath:
          path: /sys/fs/cgroup
          type: Directory
      - name: machine-id
        hostPath:
          path: /etc/machine-id
          type: File
      - name: etc-libvirt-qemu
        hostPath:
          path: /etc/libvirt/qemu
          type: DirectoryOrCreate
